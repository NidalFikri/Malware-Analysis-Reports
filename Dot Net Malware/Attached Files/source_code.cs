using System;
using System.Text;
using System.IO;
using System.Security.Cryptography;
 
namespace Decryptor
{
    public class Decryptor
    {
        public static void Main()
        {
            string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            string path = folderPath + "/WindowsUpdate.locked";
            string key = File.ReadAllLines(path)[0];
            Console.WriteLine("Key is: " + key);
            Console.WriteLine("Decrypting your files.....");
            traverse(folderPath, key);
        }
 
        public static void traverse(string string_1, string key)
        {
            string text = key;
            string[] directories = Directory.GetDirectories(string_1);
            string[] files = Directory.GetFiles(string_1, "*.*");
            foreach (string string_2 in files)
            {
                if(!string_2.EndsWith(".locked")) continue;
                try
                {
                    method_3(string_2, text);
                }
                catch
                {
                }
            }
            foreach (string path in directories)
            {
                string path2 = Path.Combine(string_1, path);
                DirectoryInfo directoryInfo = new DirectoryInfo(path2);
                if ((directoryInfo.Attributes & FileAttributes.Hidden) != FileAttributes.Hidden)
                {
                    string[] files2 = Directory.GetFiles(path2, "*.*", SearchOption.AllDirectories);
                    foreach (string string_3 in files2)
                    {
                        try
                        {
                            method_3(string_3, text);
                            goto IL_B8;
                        }
                        catch
                        {
                            goto IL_B8;
                        }
                        break;
                        IL_B8:;
                    }
                }
            }
        }
 
        public static void method_3(string string_1, string string_2)
        {
            byte[] data = File.ReadAllBytes(string_1);
            byte[] array = Encoding.UTF8.GetBytes(string_2);
            array = SHA256.Create().ComputeHash(array);
            byte[] bytes = decrypt(data, array);
            File.WriteAllBytes(string_1, bytes);
            File.Move(string_1, string_1.Remove(string_1.Length-7));
        }
 
        public static byte[] decrypt(byte[] data, byte[] sha_key)
        {
            byte[] result = null;
            byte[] salt = new byte[] {1,2,3,4,5,6,7,8};
 
            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
                {
                    rijndaelManaged.KeySize = 256;
                    rijndaelManaged.BlockSize = 128;
                    Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(sha_key, salt, 1000);
                    rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
                    rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
                    rijndaelManaged.Mode = CipherMode.CBC;
                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))
                    {
                        cryptoStream.Write(data, 0, data.Length);
                        cryptoStream.Close();
                    }
                    result = memoryStream.ToArray();
                }
            }
            return result;
        }
    }
}
